

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Jul 12 13:02:57 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4520 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataCOMRAM
    60  000C4C                     __pidataCOMRAM:
    61                           	callstack 0
    62                           
    63                           ;initializer for _keypad
    64  000C4C  37                 	db	55
    65  000C4D  38                 	db	56
    66  000C4E  39                 	db	57
    67  000C4F  2F                 	db	47
    68  000C50  34                 	db	52
    69  000C51  35                 	db	53
    70  000C52  36                 	db	54
    71  000C53  78                 	db	120
    72  000C54  31                 	db	49
    73  000C55  32                 	db	50
    74  000C56  33                 	db	51
    75  000C57  2D                 	db	45
    76  000C58  20                 	db	32
    77  000C59  30                 	db	48
    78  000C5A  3D                 	db	61
    79  000C5B  2B                 	db	43
    80                           
    81                           ;initializer for _password
    82  000C5C  0031               	dw	49
    83  000C5E  0032               	dw	50
    84  000C60  0033               	dw	51
    85  000C62  0034               	dw	52
    86  0000                     _PORTB	set	3969
    87  0000                     _LATB	set	3978
    88  0000                     _TRISB	set	3987
    89  0000                     _LATC	set	3979
    90  0000                     _TRISD	set	3989
    91  0000                     _TRISC	set	3988
    92  0000                     _LATA	set	3977
    93  0000                     _PORTA	set	3968
    94  0000                     _TRISA	set	3986
    95  0000                     _OSCCON	set	4051
    96  0000                     _LATD1	set	31841
    97  0000                     _LATD0	set	31840
    98  0000                     _RA0	set	31744
    99  0000                     _RBPU	set	32655
   100                           
   101                           	psect	smallconst
   102  000600                     __psmallconst:
   103                           	callstack 0
   104  000600  00                 	db	0
   105  000601                     STR_4:
   106  000601  50                 	db	80	;'P'
   107  000602  61                 	db	97	;'a'
   108  000603  73                 	db	115	;'s'
   109  000604  73                 	db	115	;'s'
   110  000605  77                 	db	119	;'w'
   111  000606  6F                 	db	111	;'o'
   112  000607  72                 	db	114	;'r'
   113  000608  64                 	db	100	;'d'
   114  000609  20                 	db	32
   115  00060A  65                 	db	101	;'e'
   116  00060B  6E                 	db	110	;'n'
   117  00060C  74                 	db	116	;'t'
   118  00060D  65                 	db	101	;'e'
   119  00060E  72                 	db	114	;'r'
   120  00060F  65                 	db	101	;'e'
   121  000610  64                 	db	100	;'d'
   122  000611  00                 	db	0
   123  000612                     STR_5:
   124  000612  43                 	db	67	;'C'
   125  000613  6F                 	db	111	;'o'
   126  000614  72                 	db	114	;'r'
   127  000615  72                 	db	114	;'r'
   128  000616  65                 	db	101	;'e'
   129  000617  63                 	db	99	;'c'
   130  000618  74                 	db	116	;'t'
   131  000619  20                 	db	32
   132  00061A  70                 	db	112	;'p'
   133  00061B  61                 	db	97	;'a'
   134  00061C  73                 	db	115	;'s'
   135  00061D  73                 	db	115	;'s'
   136  00061E  77                 	db	119	;'w'
   137  00061F  6F                 	db	111	;'o'
   138  000620  72                 	db	114	;'r'
   139  000621  64                 	db	100	;'d'
   140  000622  00                 	db	0
   141  000623                     STR_7:
   142  000623  45                 	db	69	;'E'
   143  000624  6E                 	db	110	;'n'
   144  000625  74                 	db	116	;'t'
   145  000626  65                 	db	101	;'e'
   146  000627  72                 	db	114	;'r'
   147  000628  20                 	db	32
   148  000629  2B                 	db	43
   149  00062A  20                 	db	32
   150  00062B  74                 	db	116	;'t'
   151  00062C  6F                 	db	111	;'o'
   152  00062D  20                 	db	32
   153  00062E  63                 	db	99	;'c'
   154  00062F  6C                 	db	108	;'l'
   155  000630  6F                 	db	111	;'o'
   156  000631  73                 	db	115	;'s'
   157  000632  65                 	db	101	;'e'
   158  000633  00                 	db	0
   159  000634                     STR_1:
   160  000634  48                 	db	72	;'H'
   161  000635  65                 	db	101	;'e'
   162  000636  6C                 	db	108	;'l'
   163  000637  6C                 	db	108	;'l'
   164  000638  6F                 	db	111	;'o'
   165  000639  20                 	db	32
   166  00063A  57                 	db	87	;'W'
   167  00063B  65                 	db	101	;'e'
   168  00063C  6C                 	db	108	;'l'
   169  00063D  63                 	db	99	;'c'
   170  00063E  6F                 	db	111	;'o'
   171  00063F  6D                 	db	109	;'m'
   172  000640  65                 	db	101	;'e'
   173  000641  20                 	db	32
   174  000642  74                 	db	116	;'t'
   175  000643  6F                 	db	111	;'o'
   176  000644  00                 	db	0
   177  000645                     STR_9:
   178  000645  57                 	db	87	;'W'
   179  000646  72                 	db	114	;'r'
   180  000647  6F                 	db	111	;'o'
   181  000648  6E                 	db	110	;'n'
   182  000649  67                 	db	103	;'g'
   183  00064A  20                 	db	32
   184  00064B  70                 	db	112	;'p'
   185  00064C  61                 	db	97	;'a'
   186  00064D  73                 	db	115	;'s'
   187  00064E  73                 	db	115	;'s'
   188  00064F  77                 	db	119	;'w'
   189  000650  6F                 	db	111	;'o'
   190  000651  72                 	db	114	;'r'
   191  000652  64                 	db	100	;'d'
   192  000653  00                 	db	0
   193  000654                     STR_3:
   194  000654  45                 	db	69	;'E'
   195  000655  6E                 	db	110	;'n'
   196  000656  74                 	db	116	;'t'
   197  000657  65                 	db	101	;'e'
   198  000658  72                 	db	114	;'r'
   199  000659  20                 	db	32
   200  00065A  70                 	db	112	;'p'
   201  00065B  61                 	db	97	;'a'
   202  00065C  73                 	db	115	;'s'
   203  00065D  73                 	db	115	;'s'
   204  00065E  77                 	db	119	;'w'
   205  00065F  6F                 	db	111	;'o'
   206  000660  72                 	db	114	;'r'
   207  000661  64                 	db	100	;'d'
   208  000662  00                 	db	0
   209  000663                     STR_6:
   210  000663  44                 	db	68	;'D'
   211  000664  6F                 	db	111	;'o'
   212  000665  6F                 	db	111	;'o'
   213  000666  72                 	db	114	;'r'
   214  000667  20                 	db	32
   215  000668  4F                 	db	79	;'O'
   216  000669  70                 	db	112	;'p'
   217  00066A  65                 	db	101	;'e'
   218  00066B  6E                 	db	110	;'n'
   219  00066C  65                 	db	101	;'e'
   220  00066D  64                 	db	100	;'d'
   221  00066E  00                 	db	0
   222  00066F                     STR_8:
   223  00066F  44                 	db	68	;'D'
   224  000670  6F                 	db	111	;'o'
   225  000671  6F                 	db	111	;'o'
   226  000672  72                 	db	114	;'r'
   227  000673  20                 	db	32
   228  000674  63                 	db	99	;'c'
   229  000675  6C                 	db	108	;'l'
   230  000676  6F                 	db	111	;'o'
   231  000677  73                 	db	115	;'s'
   232  000678  65                 	db	101	;'e'
   233  000679  64                 	db	100	;'d'
   234  00067A  00                 	db	0
   235  00067B                     STR_2:
   236  00067B  4F                 	db	79	;'O'
   237  00067C  75                 	db	117	;'u'
   238  00067D  72                 	db	114	;'r'
   239  00067E  20                 	db	32
   240  00067F  50                 	db	80	;'P'
   241  000680  72                 	db	114	;'r'
   242  000681  6F                 	db	111	;'o'
   243  000682  6A                 	db	106	;'j'
   244  000683  65                 	db	101	;'e'
   245  000684  63                 	db	99	;'c'
   246  000685  74                 	db	116	;'t'
   247  000686  00                 	db	0
   248  000687  00                 	db	0	; dummy byte at the end
   249  0000                     
   250                           ; #config settings
   251                           
   252                           	psect	cinit
   253  000B7A                     __pcinit:
   254                           	callstack 0
   255  000B7A                     start_initialization:
   256                           	callstack 0
   257  000B7A                     __initialization:
   258                           	callstack 0
   259                           
   260                           ; Initialize objects allocated to COMRAM (24 bytes)
   261                           ; load TBLPTR registers with __pidataCOMRAM
   262  000B7A  0E4C               	movlw	low __pidataCOMRAM
   263  000B7C  6EF6               	movwf	tblptrl,c
   264  000B7E  0E0C               	movlw	high __pidataCOMRAM
   265  000B80  6EF7               	movwf	tblptrh,c
   266  000B82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   267  000B84  6EF8               	movwf	tblptru,c
   268  000B86  EE00  F024         	lfsr	0,__pdataCOMRAM
   269  000B8A  EE10 F018          	lfsr	1,24
   270  000B8E                     copy_data0:
   271  000B8E  0009               	tblrd		*+
   272  000B90  CFF5 FFEE          	movff	tablat,postinc0
   273  000B94  50E5               	movf	postdec1,w,c
   274  000B96  50E1               	movf	fsr1l,w,c
   275  000B98  E1FA               	bnz	copy_data0
   276                           
   277                           ; Clear objects allocated to COMRAM (11 bytes)
   278  000B9A  EE00  F03C         	lfsr	0,__pbssCOMRAM
   279  000B9E  0E0B               	movlw	11
   280  000BA0                     clear_0:
   281  000BA0  6AEE               	clrf	postinc0,c
   282  000BA2  06E8               	decf	wreg,f,c
   283  000BA4  E1FD               	bnz	clear_0
   284  000BA6                     end_of_initialization:
   285                           	callstack 0
   286  000BA6                     __end_of__initialization:
   287                           	callstack 0
   288  000BA6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   289  000BA8  6EF8               	movwf	tblptru,c
   290  000BAA  0E06               	movlw	high __Lsmallconst
   291  000BAC  6EF7               	movwf	tblptrh,c
   292  000BAE  0100               	movlb	0
   293  000BB0  EF44  F003         	goto	_main	;jump to C main() function
   294                           
   295                           	psect	bssCOMRAM
   296  00003C                     __pbssCOMRAM:
   297                           	callstack 0
   298  00003C                     _array:
   299                           	callstack 0
   300  00003C                     	ds	8
   301  000044                     _temp_col:
   302                           	callstack 0
   303  000044                     	ds	1
   304  000045                     _rowloc:
   305                           	callstack 0
   306  000045                     	ds	1
   307  000046                     _col_loc:
   308                           	callstack 0
   309  000046                     	ds	1
   310                           
   311                           	psect	dataCOMRAM
   312  000024                     __pdataCOMRAM:
   313                           	callstack 0
   314  000024                     _keypad:
   315                           	callstack 0
   316  000024                     	ds	16
   317  000034                     _password:
   318                           	callstack 0
   319  000034                     	ds	8
   320                           
   321                           	psect	cstackCOMRAM
   322  000001                     __pcstackCOMRAM:
   323                           	callstack 0
   324  000001                     MSdelay@val:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0x0
   328  000001                     	ds	2
   329  000003                     MSdelay@i:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x2
   333  000003                     	ds	2
   334  000005                     MSdelay@j:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000005                     	ds	2
   339  000007                     LCD_Command@cmd:
   340                           	callstack 0
   341  000007                     LCD_Char@dat:
   342                           	callstack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000007                     	ds	1
   346  000008                     LCD_String@msg:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0x7
   350  000008                     	ds	2
   351  00000A                     LCD_String_xy@pos:
   352                           	callstack 0
   353                           
   354                           ; 1 bytes @ 0x9
   355  00000A                     	ds	1
   356  00000B                     LCD_String_xy@msg:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0xA
   360  00000B                     	ds	2
   361  00000D                     LCD_String_xy@row:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0xC
   365  00000D                     	ds	1
   366  00000E                     LCD_String_xy@location:
   367                           	callstack 0
   368                           
   369                           ; 1 bytes @ 0xD
   370  00000E                     	ds	1
   371  00000F                     ??_main:
   372                           
   373                           ; 1 bytes @ 0xE
   374  00000F                     	ds	11
   375  00001A                     main@e2:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x19
   379  00001A                     	ds	2
   380  00001C                     main@a2:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x1B
   384  00001C                     	ds	2
   385  00001E                     main@b2:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x1D
   389  00001E                     	ds	2
   390  000020                     main@c2:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x1F
   394  000020                     	ds	2
   395  000022                     main@d2:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x21
   399  000022                     	ds	2
   400                           
   401 ;;
   402 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   403 ;;
   404 ;; *************** function _main *****************
   405 ;; Defined at:
   406 ;;		line 39 in file "lcd_keypad.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;		None
   409 ;; Auto vars:     Size  Location     Type
   410 ;;  d2              2   33[COMRAM] int 
   411 ;;  c2              2   31[COMRAM] int 
   412 ;;  b2              2   29[COMRAM] int 
   413 ;;  a2              2   27[COMRAM] int 
   414 ;;  e2              2   25[COMRAM] int 
   415 ;;  d1              2    0        int 
   416 ;;  c1              2    0        int 
   417 ;;  b1              2    0        int 
   418 ;;  a1              2    0        int 
   419 ;;  e1              2    0        int 
   420 ;;  i               2    0        int 
   421 ;;  key             1    0        unsigned char 
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   431 ;;      Params:         0       0       0       0       0       0       0
   432 ;;      Locals:        20       0       0       0       0       0       0
   433 ;;      Temps:          1       0       0       0       0       0       0
   434 ;;      Totals:        21       0       0       0       0       0       0
   435 ;;Total ram usage:       21 bytes
   436 ;; Hardware stack levels required when called:    4
   437 ;; This function calls:
   438 ;;		_LCD_Char
   439 ;;		_LCD_Command
   440 ;;		_LCD_Init
   441 ;;		_LCD_String_xy
   442 ;;		_MSdelay
   443 ;;		_keyfind
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text0
   450  000688                     __ptext0:
   451                           	callstack 0
   452  000688                     _main:
   453                           	callstack 27
   454  000688                     
   455                           ;lcd_keypad.c: 41:     int i;;lcd_keypad.c: 42:     char key;;lcd_keypad.c: 43:     RBPU
      +                          =0;
   456  000688  9EF1               	bcf	4081,7,c	;volatile
   457  00068A                     
   458                           ;lcd_keypad.c: 44:     OSCCON=0x72;
   459  00068A  0E72               	movlw	114
   460  00068C  6ED3               	movwf	211,c	;volatile
   461  00068E                     
   462                           ;lcd_keypad.c: 45:     LCD_Init();
   463  00068E  ECF5  F005         	call	_LCD_Init	;wreg free
   464  000692                     
   465                           ;lcd_keypad.c: 46:     LCD_String_xy(1,0,"Hello Welcome to");
   466  000692  0E00               	movlw	0
   467  000694  6E0A               	movwf	LCD_String_xy@pos^0,c
   468  000696  0E34               	movlw	low STR_1
   469  000698  6E0B               	movwf	LCD_String_xy@msg^0,c
   470  00069A  0E06               	movlw	high STR_1
   471  00069C  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   472  00069E  0E01               	movlw	1
   473  0006A0  EC9D  F005         	call	_LCD_String_xy
   474  0006A4                     
   475                           ;lcd_keypad.c: 47:     LCD_String_xy(2,0,"Our Project");
   476  0006A4  0E00               	movlw	0
   477  0006A6  6E0A               	movwf	LCD_String_xy@pos^0,c
   478  0006A8  0E7B               	movlw	low STR_2
   479  0006AA  6E0B               	movwf	LCD_String_xy@msg^0,c
   480  0006AC  0E06               	movlw	high STR_2
   481  0006AE  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   482  0006B0  0E02               	movlw	2
   483  0006B2  EC9D  F005         	call	_LCD_String_xy
   484  0006B6                     
   485                           ;lcd_keypad.c: 48:     MSdelay(3000);
   486  0006B6  0E0B               	movlw	11
   487  0006B8  6E02               	movwf	(MSdelay@val+1)^0,c
   488  0006BA  0EB8               	movlw	184
   489  0006BC  6E01               	movwf	MSdelay@val^0,c
   490  0006BE  EC78  F005         	call	_MSdelay	;wreg free
   491  0006C2                     
   492                           ;lcd_keypad.c: 49:     LCD_Command(0x01);
   493  0006C2  0E01               	movlw	1
   494  0006C4  EC19  F006         	call	_LCD_Command
   495  0006C8                     
   496                           ;lcd_keypad.c: 51:     LCD_String_xy(1,0,"Enter password");
   497  0006C8  0E00               	movlw	0
   498  0006CA  6E0A               	movwf	LCD_String_xy@pos^0,c
   499  0006CC  0E54               	movlw	low STR_3
   500  0006CE  6E0B               	movwf	LCD_String_xy@msg^0,c
   501  0006D0  0E06               	movlw	high STR_3
   502  0006D2  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   503  0006D4  0E01               	movlw	1
   504  0006D6  EC9D  F005         	call	_LCD_String_xy
   505  0006DA                     
   506                           ;lcd_keypad.c: 52:     LCD_Command(0xc0);
   507  0006DA  0EC0               	movlw	192
   508  0006DC  EC19  F006         	call	_LCD_Command
   509  0006E0                     
   510                           ;lcd_keypad.c: 69:     int a2,b2,c2,d2,e2;;lcd_keypad.c: 70:     TRISA = 0x00;
   511  0006E0  0E00               	movlw	0
   512  0006E2  6E92               	movwf	146,c	;volatile
   513  0006E4                     
   514                           ;lcd_keypad.c: 71:     PORTA = 0x00;
   515  0006E4  0E00               	movlw	0
   516  0006E6  6E80               	movwf	128,c	;volatile
   517  0006E8                     
   518                           ;lcd_keypad.c: 72:     a2 = keyfind();
   519  0006E8  EC67  F004         	call	_keyfind	;wreg free
   520  0006EC  6E0F               	movwf	??_main^0,c
   521  0006EE  500F               	movf	??_main^0,w,c
   522  0006F0  6E1C               	movwf	main@a2^0,c
   523  0006F2  6A1D               	clrf	(main@a2+1)^0,c
   524  0006F4                     
   525                           ;lcd_keypad.c: 73:     LCD_Char(a2);
   526  0006F4  501C               	movf	main@a2^0,w,c
   527  0006F6  EC0C  F006         	call	_LCD_Char
   528  0006FA                     
   529                           ;lcd_keypad.c: 74:     b2 = keyfind();
   530  0006FA  EC67  F004         	call	_keyfind	;wreg free
   531  0006FE  6E0F               	movwf	??_main^0,c
   532  000700  500F               	movf	??_main^0,w,c
   533  000702  6E1E               	movwf	main@b2^0,c
   534  000704  6A1F               	clrf	(main@b2+1)^0,c
   535  000706                     
   536                           ;lcd_keypad.c: 75:     LCD_Char(b2);
   537  000706  501E               	movf	main@b2^0,w,c
   538  000708  EC0C  F006         	call	_LCD_Char
   539  00070C                     
   540                           ;lcd_keypad.c: 76:     c2 = keyfind();
   541  00070C  EC67  F004         	call	_keyfind	;wreg free
   542  000710  6E0F               	movwf	??_main^0,c
   543  000712  500F               	movf	??_main^0,w,c
   544  000714  6E20               	movwf	main@c2^0,c
   545  000716  6A21               	clrf	(main@c2+1)^0,c
   546  000718                     
   547                           ;lcd_keypad.c: 77:     LCD_Char(c2);
   548  000718  5020               	movf	main@c2^0,w,c
   549  00071A  EC0C  F006         	call	_LCD_Char
   550  00071E                     
   551                           ;lcd_keypad.c: 78:     d2 = keyfind();
   552  00071E  EC67  F004         	call	_keyfind	;wreg free
   553  000722  6E0F               	movwf	??_main^0,c
   554  000724  500F               	movf	??_main^0,w,c
   555  000726  6E22               	movwf	main@d2^0,c
   556  000728  6A23               	clrf	(main@d2+1)^0,c
   557  00072A                     
   558                           ;lcd_keypad.c: 79:     LCD_Char(d2);
   559  00072A  5022               	movf	main@d2^0,w,c
   560  00072C  EC0C  F006         	call	_LCD_Char
   561  000730                     
   562                           ;lcd_keypad.c: 80:     LCD_Command(0x01);
   563  000730  0E01               	movlw	1
   564  000732  EC19  F006         	call	_LCD_Command
   565  000736                     
   566                           ;lcd_keypad.c: 81:     LCD_String_xy(1,0,"Password entered");
   567  000736  0E00               	movlw	0
   568  000738  6E0A               	movwf	LCD_String_xy@pos^0,c
   569  00073A  0E01               	movlw	low STR_4
   570  00073C  6E0B               	movwf	LCD_String_xy@msg^0,c
   571  00073E  0E06               	movlw	high STR_4
   572  000740  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   573  000742  0E01               	movlw	1
   574  000744  EC9D  F005         	call	_LCD_String_xy
   575  000748                     
   576                           ;lcd_keypad.c: 82:     if((a1 == a2) && (b1 == b2) && (c1 == c2) && (d1 == d2) )
   577  000748  0E31               	movlw	49
   578  00074A  181C               	xorwf	main@a2^0,w,c
   579  00074C  101D               	iorwf	(main@a2+1)^0,w,c
   580  00074E  A4D8               	btfss	status,2,c
   581  000750  EFAC  F003         	goto	u481
   582  000754  EFAE  F003         	goto	u480
   583  000758                     u481:
   584  000758  EF29  F004         	goto	l1348
   585  00075C                     u480:
   586  00075C  0E32               	movlw	50
   587  00075E  181E               	xorwf	main@b2^0,w,c
   588  000760  101F               	iorwf	(main@b2+1)^0,w,c
   589  000762  A4D8               	btfss	status,2,c
   590  000764  EFB6  F003         	goto	u491
   591  000768  EFB8  F003         	goto	u490
   592  00076C                     u491:
   593  00076C  EF29  F004         	goto	l1348
   594  000770                     u490:
   595  000770  0E33               	movlw	51
   596  000772  1820               	xorwf	main@c2^0,w,c
   597  000774  1021               	iorwf	(main@c2+1)^0,w,c
   598  000776  A4D8               	btfss	status,2,c
   599  000778  EFC0  F003         	goto	u501
   600  00077C  EFC2  F003         	goto	u500
   601  000780                     u501:
   602  000780  EF29  F004         	goto	l1348
   603  000784                     u500:
   604  000784  0E34               	movlw	52
   605  000786  1822               	xorwf	main@d2^0,w,c
   606  000788  1023               	iorwf	(main@d2+1)^0,w,c
   607  00078A  A4D8               	btfss	status,2,c
   608  00078C  EFCA  F003         	goto	u511
   609  000790  EFCC  F003         	goto	u510
   610  000794                     u511:
   611  000794  EF29  F004         	goto	l1348
   612  000798                     u510:
   613  000798                     
   614                           ;lcd_keypad.c: 83:     {;lcd_keypad.c: 84:         LCD_String_xy(2,0,"Correct password")
      +                          ;
   615  000798  0E00               	movlw	0
   616  00079A  6E0A               	movwf	LCD_String_xy@pos^0,c
   617  00079C  0E12               	movlw	low STR_5
   618  00079E  6E0B               	movwf	LCD_String_xy@msg^0,c
   619  0007A0  0E06               	movlw	high STR_5
   620  0007A2  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   621  0007A4  0E02               	movlw	2
   622  0007A6  EC9D  F005         	call	_LCD_String_xy
   623  0007AA                     
   624                           ;lcd_keypad.c: 85:         MSdelay(3000);
   625  0007AA  0E0B               	movlw	11
   626  0007AC  6E02               	movwf	(MSdelay@val+1)^0,c
   627  0007AE  0EB8               	movlw	184
   628  0007B0  6E01               	movwf	MSdelay@val^0,c
   629  0007B2  EC78  F005         	call	_MSdelay	;wreg free
   630  0007B6                     
   631                           ;lcd_keypad.c: 88:         LATA = 0x02;
   632  0007B6  0E02               	movlw	2
   633  0007B8  6E89               	movwf	137,c	;volatile
   634  0007BA                     
   635                           ;lcd_keypad.c: 89:         MSdelay(3000);
   636  0007BA  0E0B               	movlw	11
   637  0007BC  6E02               	movwf	(MSdelay@val+1)^0,c
   638  0007BE  0EB8               	movlw	184
   639  0007C0  6E01               	movwf	MSdelay@val^0,c
   640  0007C2  EC78  F005         	call	_MSdelay	;wreg free
   641  0007C6                     
   642                           ;lcd_keypad.c: 92:         LATA = 0x06;
   643  0007C6  0E06               	movlw	6
   644  0007C8  6E89               	movwf	137,c	;volatile
   645  0007CA                     
   646                           ;lcd_keypad.c: 93:         LCD_Command(0x01);
   647  0007CA  0E01               	movlw	1
   648  0007CC  EC19  F006         	call	_LCD_Command
   649  0007D0                     
   650                           ;lcd_keypad.c: 94:         LCD_String_xy(1,0,"Door Opened");
   651  0007D0  0E00               	movlw	0
   652  0007D2  6E0A               	movwf	LCD_String_xy@pos^0,c
   653  0007D4  0E63               	movlw	low STR_6
   654  0007D6  6E0B               	movwf	LCD_String_xy@msg^0,c
   655  0007D8  0E06               	movlw	high STR_6
   656  0007DA  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   657  0007DC  0E01               	movlw	1
   658  0007DE  EC9D  F005         	call	_LCD_String_xy
   659  0007E2                     
   660                           ;lcd_keypad.c: 95:         LCD_String_xy(2,0,"Enter + to close");
   661  0007E2  0E00               	movlw	0
   662  0007E4  6E0A               	movwf	LCD_String_xy@pos^0,c
   663  0007E6  0E23               	movlw	low STR_7
   664  0007E8  6E0B               	movwf	LCD_String_xy@msg^0,c
   665  0007EA  0E06               	movlw	high STR_7
   666  0007EC  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   667  0007EE  0E02               	movlw	2
   668  0007F0  EC9D  F005         	call	_LCD_String_xy
   669  0007F4                     
   670                           ;lcd_keypad.c: 96:         LCD_Command(0xc0);
   671  0007F4  0EC0               	movlw	192
   672  0007F6  EC19  F006         	call	_LCD_Command
   673  0007FA                     
   674                           ;lcd_keypad.c: 97:         e2 = keyfind();
   675  0007FA  EC67  F004         	call	_keyfind	;wreg free
   676  0007FE  6E0F               	movwf	??_main^0,c
   677  000800  500F               	movf	??_main^0,w,c
   678  000802  6E1A               	movwf	main@e2^0,c
   679  000804  6A1B               	clrf	(main@e2+1)^0,c
   680  000806                     
   681                           ;lcd_keypad.c: 98:         LCD_Char(e2);
   682  000806  501A               	movf	main@e2^0,w,c
   683  000808  EC0C  F006         	call	_LCD_Char
   684  00080C                     
   685                           ;lcd_keypad.c: 99:         if(e1 == e2)
   686  00080C  0E2B               	movlw	43
   687  00080E  181A               	xorwf	main@e2^0,w,c
   688  000810  101B               	iorwf	(main@e2+1)^0,w,c
   689  000812  A4D8               	btfss	status,2,c
   690  000814  EF0E  F004         	goto	u521
   691  000818  EF10  F004         	goto	u520
   692  00081C                     u521:
   693  00081C  EF29  F004         	goto	l1348
   694  000820                     u520:
   695  000820                     
   696                           ;lcd_keypad.c: 100:         {;lcd_keypad.c: 101:             LCD_Command(0x01);
   697  000820  0E01               	movlw	1
   698  000822  EC19  F006         	call	_LCD_Command
   699  000826                     
   700                           ;lcd_keypad.c: 102:             LCD_String_xy(1,0,"Door closed");
   701  000826  0E00               	movlw	0
   702  000828  6E0A               	movwf	LCD_String_xy@pos^0,c
   703  00082A  0E6F               	movlw	low STR_8
   704  00082C  6E0B               	movwf	LCD_String_xy@msg^0,c
   705  00082E  0E06               	movlw	high STR_8
   706  000830  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   707  000832  0E01               	movlw	1
   708  000834  EC9D  F005         	call	_LCD_String_xy
   709  000838                     
   710                           ;lcd_keypad.c: 103:             LATA = 0x04;
   711  000838  0E04               	movlw	4
   712  00083A  6E89               	movwf	137,c	;volatile
   713  00083C                     
   714                           ;lcd_keypad.c: 106:             MSdelay(3000);
   715  00083C  0E0B               	movlw	11
   716  00083E  6E02               	movwf	(MSdelay@val+1)^0,c
   717  000840  0EB8               	movlw	184
   718  000842  6E01               	movwf	MSdelay@val^0,c
   719  000844  EC78  F005         	call	_MSdelay	;wreg free
   720  000848                     
   721                           ;lcd_keypad.c: 107:             LATA = 0x06;
   722  000848  0E06               	movlw	6
   723  00084A  6E89               	movwf	137,c	;volatile
   724  00084C                     
   725                           ;lcd_keypad.c: 110:             LCD_Command(0x01);
   726  00084C  0E01               	movlw	1
   727  00084E  EC19  F006         	call	_LCD_Command
   728  000852                     l1348:
   729                           
   730                           ;lcd_keypad.c: 129:     if((a1 != a2) || (b1 != b2) || (c1 != c2) || (d1 != d2))
   731  000852  0E31               	movlw	49
   732  000854  181C               	xorwf	main@a2^0,w,c
   733  000856  101D               	iorwf	(main@a2+1)^0,w,c
   734  000858  A4D8               	btfss	status,2,c
   735  00085A  EF31  F004         	goto	u531
   736  00085E  EF33  F004         	goto	u530
   737  000862                     u531:
   738  000862  EF51  F004         	goto	l1356
   739  000866                     u530:
   740  000866  0E32               	movlw	50
   741  000868  181E               	xorwf	main@b2^0,w,c
   742  00086A  101F               	iorwf	(main@b2+1)^0,w,c
   743  00086C  A4D8               	btfss	status,2,c
   744  00086E  EF3B  F004         	goto	u541
   745  000872  EF3D  F004         	goto	u540
   746  000876                     u541:
   747  000876  EF51  F004         	goto	l1356
   748  00087A                     u540:
   749  00087A  0E33               	movlw	51
   750  00087C  1820               	xorwf	main@c2^0,w,c
   751  00087E  1021               	iorwf	(main@c2+1)^0,w,c
   752  000880  A4D8               	btfss	status,2,c
   753  000882  EF45  F004         	goto	u551
   754  000886  EF47  F004         	goto	u550
   755  00088A                     u551:
   756  00088A  EF51  F004         	goto	l1356
   757  00088E                     u550:
   758  00088E  0E34               	movlw	52
   759  000890  1822               	xorwf	main@d2^0,w,c
   760  000892  1023               	iorwf	(main@d2+1)^0,w,c
   761  000894  B4D8               	btfsc	status,2,c
   762  000896  EF4F  F004         	goto	u561
   763  00089A  EF51  F004         	goto	u560
   764  00089E                     u561:
   765  00089E  EF65  F004         	goto	l62
   766  0008A2                     u560:
   767  0008A2                     l1356:
   768                           
   769                           ;lcd_keypad.c: 130:     {;lcd_keypad.c: 131:         LCD_Command(0x01);
   770  0008A2  0E01               	movlw	1
   771  0008A4  EC19  F006         	call	_LCD_Command
   772  0008A8                     
   773                           ;lcd_keypad.c: 132:         LCD_String_xy(1,0,"Wrong password");
   774  0008A8  0E00               	movlw	0
   775  0008AA  6E0A               	movwf	LCD_String_xy@pos^0,c
   776  0008AC  0E45               	movlw	low STR_9
   777  0008AE  6E0B               	movwf	LCD_String_xy@msg^0,c
   778  0008B0  0E06               	movlw	high STR_9
   779  0008B2  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   780  0008B4  0E01               	movlw	1
   781  0008B6  EC9D  F005         	call	_LCD_String_xy
   782  0008BA                     
   783                           ;lcd_keypad.c: 133:         RA0 = 1;
   784  0008BA  8080               	bsf	3968,0,c	;volatile
   785  0008BC                     
   786                           ;lcd_keypad.c: 134:         MSdelay(3000);
   787  0008BC  0E0B               	movlw	11
   788  0008BE  6E02               	movwf	(MSdelay@val+1)^0,c
   789  0008C0  0EB8               	movlw	184
   790  0008C2  6E01               	movwf	MSdelay@val^0,c
   791  0008C4  EC78  F005         	call	_MSdelay	;wreg free
   792  0008C8                     
   793                           ;lcd_keypad.c: 135:         RA0 = 0;
   794  0008C8  9080               	bcf	3968,0,c	;volatile
   795  0008CA                     l62:
   796  0008CA  EF00  F000         	goto	start
   797  0008CE                     __end_of_main:
   798                           	callstack 0
   799                           
   800 ;; *************** function _keyfind *****************
   801 ;; Defined at:
   802 ;;		line 210 in file "lcd_keypad.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;  temp1           1    0        unsigned char 
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      unsigned char 
   809 ;; Registers used:
   810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   816 ;;      Params:         0       0       0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    1
   823 ;; This function calls:
   824 ;;		_MSdelay
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text1
   831  0008CE                     __ptext1:
   832                           	callstack 0
   833  0008CE                     _keyfind:
   834                           	callstack 29
   835  0008CE                     
   836                           ;lcd_keypad.c: 213:     TRISB = 0xf0;
   837  0008CE  0EF0               	movlw	240
   838  0008D0  6E93               	movwf	147,c	;volatile
   839                           
   840                           ;lcd_keypad.c: 214:     unsigned char temp1;;lcd_keypad.c: 216:         LATB = 0xf0;
   841  0008D2  0EF0               	movlw	240
   842  0008D4  6E8A               	movwf	138,c	;volatile
   843  0008D6                     l1154:
   844                           
   845                           ;lcd_keypad.c: 220:         {;lcd_keypad.c: 222:             col_loc = PORTB & 0xf0;
   846  0008D6  5081               	movf	129,w,c	;volatile
   847  0008D8  0BF0               	andlw	240
   848  0008DA  6E46               	movwf	_col_loc^0,c
   849  0008DC                     
   850                           ;lcd_keypad.c: 224:         }while(col_loc!=0xf0);
   851  0008DC  0EF0               	movlw	240
   852  0008DE  1846               	xorwf	_col_loc^0,w,c
   853  0008E0  A4D8               	btfss	status,2,c
   854  0008E2  EF75  F004         	goto	u331
   855  0008E6  EF77  F004         	goto	u330
   856  0008EA                     u331:
   857  0008EA  EF6B  F004         	goto	l1154
   858  0008EE                     u330:
   859  0008EE                     
   860                           ;lcd_keypad.c: 225:          col_loc = PORTB & 0xf0;
   861  0008EE  5081               	movf	129,w,c	;volatile
   862  0008F0  0BF0               	andlw	240
   863  0008F2  6E46               	movwf	_col_loc^0,c
   864                           
   865                           ;lcd_keypad.c: 226:       }while(col_loc!=0xf0);
   866  0008F4  0EF0               	movlw	240
   867  0008F6  1846               	xorwf	_col_loc^0,w,c
   868  0008F8  A4D8               	btfss	status,2,c
   869  0008FA  EF81  F004         	goto	u341
   870  0008FE  EF83  F004         	goto	u340
   871  000902                     u341:
   872  000902  EF6B  F004         	goto	l1154
   873  000906                     u340:
   874  000906                     
   875                           ;lcd_keypad.c: 228:       MSdelay(50);
   876  000906  0E00               	movlw	0
   877  000908  6E02               	movwf	(MSdelay@val+1)^0,c
   878  00090A  0E32               	movlw	50
   879  00090C  6E01               	movwf	MSdelay@val^0,c
   880  00090E  EC78  F005         	call	_MSdelay	;wreg free
   881  000912                     
   882                           ;lcd_keypad.c: 229:         LATB = 0xf0;
   883  000912  0EF0               	movlw	240
   884  000914  6E8A               	movwf	138,c	;volatile
   885  000916                     l1164:
   886                           
   887                           ;lcd_keypad.c: 233:             {;lcd_keypad.c: 235:                 col_loc = PORTB & 0
      +                          xf0;
   888  000916  5081               	movf	129,w,c	;volatile
   889  000918  0BF0               	andlw	240
   890  00091A  6E46               	movwf	_col_loc^0,c
   891  00091C                     
   892                           ;lcd_keypad.c: 236:             }while(col_loc==0xf0);
   893  00091C  0EF0               	movlw	240
   894  00091E  1846               	xorwf	_col_loc^0,w,c
   895  000920  B4D8               	btfsc	status,2,c
   896  000922  EF95  F004         	goto	u351
   897  000926  EF97  F004         	goto	u350
   898  00092A                     u351:
   899  00092A  EF8B  F004         	goto	l1164
   900  00092E                     u350:
   901  00092E                     
   902                           ;lcd_keypad.c: 237:          col_loc = PORTB & 0xf0;
   903  00092E  5081               	movf	129,w,c	;volatile
   904  000930  0BF0               	andlw	240
   905  000932  6E46               	movwf	_col_loc^0,c
   906                           
   907                           ;lcd_keypad.c: 238:         }while(col_loc==0xf0);
   908  000934  0EF0               	movlw	240
   909  000936  1846               	xorwf	_col_loc^0,w,c
   910  000938  B4D8               	btfsc	status,2,c
   911  00093A  EFA1  F004         	goto	u361
   912  00093E  EFA3  F004         	goto	u360
   913  000942                     u361:
   914  000942  EF8B  F004         	goto	l1164
   915  000946                     u360:
   916  000946                     
   917                           ;lcd_keypad.c: 240:         MSdelay(20);
   918  000946  0E00               	movlw	0
   919  000948  6E02               	movwf	(MSdelay@val+1)^0,c
   920  00094A  0E14               	movlw	20
   921  00094C  6E01               	movwf	MSdelay@val^0,c
   922  00094E  EC78  F005         	call	_MSdelay	;wreg free
   923  000952                     
   924                           ;lcd_keypad.c: 242:         col_loc = PORTB & 0xf0;
   925  000952  5081               	movf	129,w,c	;volatile
   926  000954  0BF0               	andlw	240
   927  000956  6E46               	movwf	_col_loc^0,c
   928  000958                     l1174:
   929                           
   930                           ;lcd_keypad.c: 247:     {;lcd_keypad.c: 248:         LATB = 0xfe;
   931  000958  0EFE               	movlw	254
   932  00095A  6E8A               	movwf	138,c	;volatile
   933  00095C                     
   934                           ;lcd_keypad.c: 249:         col_loc = PORTB & 0xf0;
   935  00095C  5081               	movf	129,w,c	;volatile
   936  00095E  0BF0               	andlw	240
   937  000960  6E46               	movwf	_col_loc^0,c
   938  000962                     
   939                           ;lcd_keypad.c: 250:         temp_col=col_loc;
   940  000962  C046  F044         	movff	_col_loc,_temp_col
   941  000966                     
   942                           ;lcd_keypad.c: 251:         if(col_loc!=0xf0)
   943  000966  0EF0               	movlw	240
   944  000968  1846               	xorwf	_col_loc^0,w,c
   945  00096A  B4D8               	btfsc	status,2,c
   946  00096C  EFBA  F004         	goto	u371
   947  000970  EFBC  F004         	goto	u370
   948  000974                     u371:
   949  000974  EFCE  F004         	goto	l1186
   950  000978                     u370:
   951  000978                     
   952                           ;lcd_keypad.c: 252:         {;lcd_keypad.c: 253:             rowloc=0;
   953  000978  0E00               	movlw	0
   954  00097A  6E45               	movwf	_rowloc^0,c
   955                           
   956                           ;lcd_keypad.c: 254:             while(temp_col!=0xf0)
   957  00097C  EFC3  F004         	goto	l106
   958  000980                     l1184:
   959                           
   960                           ;lcd_keypad.c: 255:             {;lcd_keypad.c: 256:                 temp_col = PORTB & 
      +                          0xf0;
   961  000980  5081               	movf	129,w,c	;volatile
   962  000982  0BF0               	andlw	240
   963  000984  6E44               	movwf	_temp_col^0,c
   964  000986                     l106:
   965                           
   966                           ;lcd_keypad.c: 254:             while(temp_col!=0xf0)
   967  000986  0EF0               	movlw	240
   968  000988  1844               	xorwf	_temp_col^0,w,c
   969  00098A  A4D8               	btfss	status,2,c
   970  00098C  EFCA  F004         	goto	u381
   971  000990  EFCC  F004         	goto	u380
   972  000994                     u381:
   973  000994  EFC0  F004         	goto	l1184
   974  000998                     u380:
   975  000998  EF32  F005         	goto	l1222
   976  00099C                     l1186:
   977                           
   978                           ;lcd_keypad.c: 261:         LATB = 0xfd;
   979  00099C  0EFD               	movlw	253
   980  00099E  6E8A               	movwf	138,c	;volatile
   981  0009A0                     
   982                           ;lcd_keypad.c: 262:         col_loc = PORTB & 0xf0;
   983  0009A0  5081               	movf	129,w,c	;volatile
   984  0009A2  0BF0               	andlw	240
   985  0009A4  6E46               	movwf	_col_loc^0,c
   986  0009A6                     
   987                           ;lcd_keypad.c: 263:         temp_col=col_loc;
   988  0009A6  C046  F044         	movff	_col_loc,_temp_col
   989  0009AA                     
   990                           ;lcd_keypad.c: 264:         if(col_loc!=0xf0)
   991  0009AA  0EF0               	movlw	240
   992  0009AC  1846               	xorwf	_col_loc^0,w,c
   993  0009AE  B4D8               	btfsc	status,2,c
   994  0009B0  EFDC  F004         	goto	u391
   995  0009B4  EFDE  F004         	goto	u390
   996  0009B8                     u391:
   997  0009B8  EFF0  F004         	goto	l1198
   998  0009BC                     u390:
   999  0009BC                     
  1000                           ;lcd_keypad.c: 265:         {;lcd_keypad.c: 266:             rowloc=1;
  1001  0009BC  0E01               	movlw	1
  1002  0009BE  6E45               	movwf	_rowloc^0,c
  1003                           
  1004                           ;lcd_keypad.c: 267:             while(temp_col!=0xf0)
  1005  0009C0  EFE5  F004         	goto	l111
  1006  0009C4                     l1196:
  1007                           
  1008                           ;lcd_keypad.c: 268:             {;lcd_keypad.c: 269:                 temp_col = PORTB & 
      +                          0xf0;
  1009  0009C4  5081               	movf	129,w,c	;volatile
  1010  0009C6  0BF0               	andlw	240
  1011  0009C8  6E44               	movwf	_temp_col^0,c
  1012  0009CA                     l111:
  1013                           
  1014                           ;lcd_keypad.c: 267:             while(temp_col!=0xf0)
  1015  0009CA  0EF0               	movlw	240
  1016  0009CC  1844               	xorwf	_temp_col^0,w,c
  1017  0009CE  A4D8               	btfss	status,2,c
  1018  0009D0  EFEC  F004         	goto	u401
  1019  0009D4  EFEE  F004         	goto	u400
  1020  0009D8                     u401:
  1021  0009D8  EFE2  F004         	goto	l1196
  1022  0009DC                     u400:
  1023  0009DC  EF32  F005         	goto	l1222
  1024  0009E0                     l1198:
  1025                           
  1026                           ;lcd_keypad.c: 274:         LATB = 0xfb;
  1027  0009E0  0EFB               	movlw	251
  1028  0009E2  6E8A               	movwf	138,c	;volatile
  1029  0009E4                     
  1030                           ;lcd_keypad.c: 275:         col_loc = PORTB & 0xf0;
  1031  0009E4  5081               	movf	129,w,c	;volatile
  1032  0009E6  0BF0               	andlw	240
  1033  0009E8  6E46               	movwf	_col_loc^0,c
  1034  0009EA                     
  1035                           ;lcd_keypad.c: 276:         temp_col=col_loc;
  1036  0009EA  C046  F044         	movff	_col_loc,_temp_col
  1037  0009EE                     
  1038                           ;lcd_keypad.c: 277:         if(col_loc!=0xf0)
  1039  0009EE  0EF0               	movlw	240
  1040  0009F0  1846               	xorwf	_col_loc^0,w,c
  1041  0009F2  B4D8               	btfsc	status,2,c
  1042  0009F4  EFFE  F004         	goto	u411
  1043  0009F8  EF00  F005         	goto	u410
  1044  0009FC                     u411:
  1045  0009FC  EF12  F005         	goto	l1210
  1046  000A00                     u410:
  1047  000A00                     
  1048                           ;lcd_keypad.c: 278:         {;lcd_keypad.c: 279:             rowloc=2;
  1049  000A00  0E02               	movlw	2
  1050  000A02  6E45               	movwf	_rowloc^0,c
  1051                           
  1052                           ;lcd_keypad.c: 280:             while(temp_col!=0xf0)
  1053  000A04  EF07  F005         	goto	l115
  1054  000A08                     l1208:
  1055                           
  1056                           ;lcd_keypad.c: 281:             {;lcd_keypad.c: 282:                 temp_col = PORTB & 
      +                          0xf0;
  1057  000A08  5081               	movf	129,w,c	;volatile
  1058  000A0A  0BF0               	andlw	240
  1059  000A0C  6E44               	movwf	_temp_col^0,c
  1060  000A0E                     l115:
  1061                           
  1062                           ;lcd_keypad.c: 280:             while(temp_col!=0xf0)
  1063  000A0E  0EF0               	movlw	240
  1064  000A10  1844               	xorwf	_temp_col^0,w,c
  1065  000A12  A4D8               	btfss	status,2,c
  1066  000A14  EF0E  F005         	goto	u421
  1067  000A18  EF10  F005         	goto	u420
  1068  000A1C                     u421:
  1069  000A1C  EF04  F005         	goto	l1208
  1070  000A20                     u420:
  1071  000A20  EF32  F005         	goto	l1222
  1072  000A24                     l1210:
  1073                           
  1074                           ;lcd_keypad.c: 287:         LATB = 0xf7;
  1075  000A24  0EF7               	movlw	247
  1076  000A26  6E8A               	movwf	138,c	;volatile
  1077  000A28                     
  1078                           ;lcd_keypad.c: 288:         col_loc = PORTB & 0xf0;
  1079  000A28  5081               	movf	129,w,c	;volatile
  1080  000A2A  0BF0               	andlw	240
  1081  000A2C  6E46               	movwf	_col_loc^0,c
  1082  000A2E                     
  1083                           ;lcd_keypad.c: 289:         temp_col=col_loc;
  1084  000A2E  C046  F044         	movff	_col_loc,_temp_col
  1085  000A32                     
  1086                           ;lcd_keypad.c: 290:         if(col_loc!=0xf0)
  1087  000A32  0EF0               	movlw	240
  1088  000A34  1846               	xorwf	_col_loc^0,w,c
  1089  000A36  B4D8               	btfsc	status,2,c
  1090  000A38  EF20  F005         	goto	u431
  1091  000A3C  EF22  F005         	goto	u430
  1092  000A40                     u431:
  1093  000A40  EFAC  F004         	goto	l1174
  1094  000A44                     u430:
  1095  000A44                     
  1096                           ;lcd_keypad.c: 291:         {;lcd_keypad.c: 292:             rowloc=3;
  1097  000A44  0E03               	movlw	3
  1098  000A46  6E45               	movwf	_rowloc^0,c
  1099                           
  1100                           ;lcd_keypad.c: 293:             while(temp_col!=0xf0)
  1101  000A48  EF29  F005         	goto	l119
  1102  000A4C                     l1220:
  1103                           
  1104                           ;lcd_keypad.c: 294:             {;lcd_keypad.c: 295:                 temp_col = PORTB & 
      +                          0xf0;
  1105  000A4C  5081               	movf	129,w,c	;volatile
  1106  000A4E  0BF0               	andlw	240
  1107  000A50  6E44               	movwf	_temp_col^0,c
  1108  000A52                     l119:
  1109                           
  1110                           ;lcd_keypad.c: 293:             while(temp_col!=0xf0)
  1111  000A52  0EF0               	movlw	240
  1112  000A54  1844               	xorwf	_temp_col^0,w,c
  1113  000A56  A4D8               	btfss	status,2,c
  1114  000A58  EF30  F005         	goto	u441
  1115  000A5C  EF32  F005         	goto	u440
  1116  000A60                     u441:
  1117  000A60  EF26  F005         	goto	l1220
  1118  000A64                     u440:
  1119  000A64                     l1222:
  1120                           
  1121                           ;lcd_keypad.c: 304:     {;lcd_keypad.c: 306:         if(col_loc==0xe0)
  1122  000A64  0EE0               	movlw	224
  1123  000A66  1846               	xorwf	_col_loc^0,w,c
  1124  000A68  A4D8               	btfss	status,2,c
  1125  000A6A  EF39  F005         	goto	u451
  1126  000A6E  EF3B  F005         	goto	u450
  1127  000A72                     u451:
  1128  000A72  EF46  F005         	goto	l1230
  1129  000A76                     u450:
  1130  000A76                     
  1131                           ;lcd_keypad.c: 307:         {;lcd_keypad.c: 308:              return keypad[rowloc][0];
  1132  000A76  5045               	movf	_rowloc^0,w,c
  1133  000A78  0D04               	mullw	4
  1134  000A7A  0E24               	movlw	low _keypad
  1135  000A7C  24F3               	addwf	243,w,c
  1136  000A7E  6ED9               	movwf	fsr2l,c
  1137  000A80  0E00               	movlw	high _keypad
  1138  000A82  20F4               	addwfc	prodh,w,c
  1139  000A84  6EDA               	movwf	fsr2h,c
  1140  000A86  50DF               	movf	indf2,w,c
  1141  000A88  EF77  F005         	goto	l125
  1142  000A8C                     l1230:
  1143                           
  1144                           ;lcd_keypad.c: 311:             if(col_loc==0xd0)
  1145  000A8C  0ED0               	movlw	208
  1146  000A8E  1846               	xorwf	_col_loc^0,w,c
  1147  000A90  A4D8               	btfss	status,2,c
  1148  000A92  EF4D  F005         	goto	u461
  1149  000A96  EF4F  F005         	goto	u460
  1150  000A9A                     u461:
  1151  000A9A  EF5A  F005         	goto	l1238
  1152  000A9E                     u460:
  1153  000A9E                     
  1154                           ;lcd_keypad.c: 312:         {;lcd_keypad.c: 313:             return keypad[rowloc][1];
  1155  000A9E  5045               	movf	_rowloc^0,w,c
  1156  000AA0  0D04               	mullw	4
  1157  000AA2  0E25               	movlw	low (_keypad+1)
  1158  000AA4  24F3               	addwf	243,w,c
  1159  000AA6  6ED9               	movwf	fsr2l,c
  1160  000AA8  0E00               	movlw	high (_keypad+1)
  1161  000AAA  20F4               	addwfc	prodh,w,c
  1162  000AAC  6EDA               	movwf	fsr2h,c
  1163  000AAE  50DF               	movf	indf2,w,c
  1164  000AB0  EF77  F005         	goto	l125
  1165  000AB4                     l1238:
  1166                           
  1167                           ;lcd_keypad.c: 316:             if(col_loc==0xb0)
  1168  000AB4  0EB0               	movlw	176
  1169  000AB6  1846               	xorwf	_col_loc^0,w,c
  1170  000AB8  A4D8               	btfss	status,2,c
  1171  000ABA  EF61  F005         	goto	u471
  1172  000ABE  EF63  F005         	goto	u470
  1173  000AC2                     u471:
  1174  000AC2  EF6E  F005         	goto	l1246
  1175  000AC6                     u470:
  1176  000AC6                     
  1177                           ;lcd_keypad.c: 317:         {;lcd_keypad.c: 318:             return keypad[rowloc][2];
  1178  000AC6  5045               	movf	_rowloc^0,w,c
  1179  000AC8  0D04               	mullw	4
  1180  000ACA  0E26               	movlw	low (_keypad+2)
  1181  000ACC  24F3               	addwf	243,w,c
  1182  000ACE  6ED9               	movwf	fsr2l,c
  1183  000AD0  0E00               	movlw	high (_keypad+2)
  1184  000AD2  20F4               	addwfc	prodh,w,c
  1185  000AD4  6EDA               	movwf	fsr2h,c
  1186  000AD6  50DF               	movf	indf2,w,c
  1187  000AD8  EF77  F005         	goto	l125
  1188  000ADC                     l1246:
  1189                           
  1190                           ;lcd_keypad.c: 322:         {;lcd_keypad.c: 323:             return keypad[rowloc][3];
  1191  000ADC  5045               	movf	_rowloc^0,w,c
  1192  000ADE  0D04               	mullw	4
  1193  000AE0  0E27               	movlw	low (_keypad+3)
  1194  000AE2  24F3               	addwf	243,w,c
  1195  000AE4  6ED9               	movwf	fsr2l,c
  1196  000AE6  0E00               	movlw	high (_keypad+3)
  1197  000AE8  20F4               	addwfc	prodh,w,c
  1198  000AEA  6EDA               	movwf	fsr2h,c
  1199  000AEC  50DF               	movf	indf2,w,c
  1200  000AEE                     l125:
  1201  000AEE  0012               	return		;funcret
  1202  000AF0                     __end_of_keyfind:
  1203                           	callstack 0
  1204                           
  1205 ;; *************** function _LCD_String_xy *****************
  1206 ;; Defined at:
  1207 ;;		line 186 in file "lcd_keypad.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;  row             1    wreg     unsigned char 
  1210 ;;  pos             1    9[COMRAM] unsigned char 
  1211 ;;  msg             2   10[COMRAM] PTR const unsigned char 
  1212 ;;		 -> STR_9(15), STR_8(12), STR_7(17), STR_6(12), 
  1213 ;;		 -> STR_5(17), STR_4(17), STR_3(15), STR_2(12), 
  1214 ;;		 -> STR_1(17), 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  row             1   12[COMRAM] unsigned char 
  1217 ;;  location        1   13[COMRAM] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1227 ;;      Params:         3       0       0       0       0       0       0
  1228 ;;      Locals:         2       0       0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0
  1230 ;;      Totals:         5       0       0       0       0       0       0
  1231 ;;Total ram usage:        5 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    3
  1234 ;; This function calls:
  1235 ;;		_LCD_Command
  1236 ;;		_LCD_String
  1237 ;; This function is called by:
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text2
  1243  000B3A                     __ptext2:
  1244                           	callstack 0
  1245  000B3A                     _LCD_String_xy:
  1246                           	callstack 27
  1247                           
  1248                           ;incstack = 0
  1249                           ;LCD_String_xy@row stored from wreg
  1250  000B3A  6E0D               	movwf	LCD_String_xy@row^0,c
  1251  000B3C                     
  1252                           ;lcd_keypad.c: 189:     if(row<=1)
  1253  000B3C  0E02               	movlw	2
  1254  000B3E  600D               	cpfslt	LCD_String_xy@row^0,c
  1255  000B40  EFA4  F005         	goto	u321
  1256  000B44  EFA6  F005         	goto	u320
  1257  000B48                     u321:
  1258  000B48  EFAF  F005         	goto	l1146
  1259  000B4C                     u320:
  1260  000B4C                     
  1261                           ;lcd_keypad.c: 190:     {;lcd_keypad.c: 191:         location=(0x80) | ((pos) & 0x0f);
  1262  000B4C  500A               	movf	LCD_String_xy@pos^0,w,c
  1263  000B4E  0B0F               	andlw	15
  1264  000B50  0980               	iorlw	128
  1265  000B52  6E0E               	movwf	LCD_String_xy@location^0,c
  1266  000B54                     
  1267                           ;lcd_keypad.c: 192:         LCD_Command(location);
  1268  000B54  500E               	movf	LCD_String_xy@location^0,w,c
  1269  000B56  EC19  F006         	call	_LCD_Command
  1270                           
  1271                           ;lcd_keypad.c: 193:     }
  1272  000B5A  EFB6  F005         	goto	l1150
  1273  000B5E                     l1146:
  1274                           
  1275                           ;lcd_keypad.c: 195:     {;lcd_keypad.c: 196:         location=(0xC0) | ((pos) & 0x0f);
  1276  000B5E  500A               	movf	LCD_String_xy@pos^0,w,c
  1277  000B60  0B0F               	andlw	15
  1278  000B62  09C0               	iorlw	192
  1279  000B64  6E0E               	movwf	LCD_String_xy@location^0,c
  1280  000B66                     
  1281                           ;lcd_keypad.c: 197:         LCD_Command(location);
  1282  000B66  500E               	movf	LCD_String_xy@location^0,w,c
  1283  000B68  EC19  F006         	call	_LCD_Command
  1284  000B6C                     l1150:
  1285                           
  1286                           ;lcd_keypad.c: 199:     LCD_String(msg);
  1287  000B6C  C00B  F008         	movff	LCD_String_xy@msg,LCD_String@msg
  1288  000B70  C00C  F009         	movff	LCD_String_xy@msg+1,LCD_String@msg+1
  1289  000B74  ECDA  F005         	call	_LCD_String	;wreg free
  1290  000B78  0012               	return		;funcret
  1291  000B7A                     __end_of_LCD_String_xy:
  1292                           	callstack 0
  1293                           
  1294 ;; *************** function _LCD_String *****************
  1295 ;; Defined at:
  1296 ;;		line 176 in file "lcd_keypad.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  msg             2    7[COMRAM] PTR const unsigned char 
  1299 ;;		 -> STR_9(15), STR_8(12), STR_7(17), STR_6(12), 
  1300 ;;		 -> STR_5(17), STR_4(17), STR_3(15), STR_2(12), 
  1301 ;;		 -> STR_1(17), 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1313 ;;      Params:         2       0       0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0
  1316 ;;      Totals:         2       0       0       0       0       0       0
  1317 ;;Total ram usage:        2 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    2
  1320 ;; This function calls:
  1321 ;;		_LCD_Char
  1322 ;; This function is called by:
  1323 ;;		_LCD_String_xy
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text3
  1328  000BB4                     __ptext3:
  1329                           	callstack 0
  1330  000BB4                     _LCD_String:
  1331                           	callstack 27
  1332  000BB4                     
  1333                           ;lcd_keypad.c: 176: void LCD_String(const char *msg);lcd_keypad.c: 177: {;lcd_keypad.c: 
      +                          178:  while((*msg)!=0)
  1334  000BB4  EFE6  F005         	goto	l1130
  1335  000BB8                     l1126:
  1336                           
  1337                           ;lcd_keypad.c: 179:  {;lcd_keypad.c: 180:    LCD_Char(*msg);
  1338  000BB8  C008  FFF6         	movff	LCD_String@msg,tblptrl
  1339  000BBC  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
  1340  000BC0                     	if	0	;tblptru may be non-zero
  1341  000BC0                     	endif
  1342  000BC0                     	if	0	;tblptru may be non-zero
  1343  000BC0                     	endif
  1344  000BC0  0008               	tblrd		*
  1345  000BC2  50F5               	movf	tablat,w,c
  1346  000BC4  EC0C  F006         	call	_LCD_Char
  1347  000BC8                     
  1348                           ;lcd_keypad.c: 181:    msg++;
  1349  000BC8  4A08               	infsnz	LCD_String@msg^0,f,c
  1350  000BCA  2A09               	incf	(LCD_String@msg+1)^0,f,c
  1351  000BCC                     l1130:
  1352                           
  1353                           ;lcd_keypad.c: 178:  while((*msg)!=0)
  1354  000BCC  C008  FFF6         	movff	LCD_String@msg,tblptrl
  1355  000BD0  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
  1356  000BD4                     	if	0	;tblptru may be non-zero
  1357  000BD4                     	endif
  1358  000BD4                     	if	0	;tblptru may be non-zero
  1359  000BD4                     	endif
  1360  000BD4  0008               	tblrd		*
  1361  000BD6  50F5               	movf	tablat,w,c
  1362  000BD8  0900               	iorlw	0
  1363  000BDA  A4D8               	btfss	status,2,c
  1364  000BDC  EFF2  F005         	goto	u311
  1365  000BE0  EFF4  F005         	goto	u310
  1366  000BE4                     u311:
  1367  000BE4  EFDC  F005         	goto	l1126
  1368  000BE8                     u310:
  1369  000BE8  0012               	return		;funcret
  1370  000BEA                     __end_of_LCD_String:
  1371                           	callstack 0
  1372                           
  1373 ;; *************** function _LCD_Char *****************
  1374 ;; Defined at:
  1375 ;;		line 166 in file "lcd_keypad.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;  dat             1    wreg     unsigned char 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  dat             1    6[COMRAM] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1389 ;;      Params:         0       0       0       0       0       0       0
  1390 ;;      Locals:         1       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0
  1392 ;;      Totals:         1       0       0       0       0       0       0
  1393 ;;Total ram usage:        1 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    1
  1396 ;; This function calls:
  1397 ;;		_MSdelay
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;;		_LCD_String
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text4
  1405  000C18                     __ptext4:
  1406                           	callstack 0
  1407  000C18                     _LCD_Char:
  1408                           	callstack 27
  1409                           
  1410                           ;incstack = 0
  1411                           ;LCD_Char@dat stored from wreg
  1412  000C18  6E07               	movwf	LCD_Char@dat^0,c
  1413  000C1A                     
  1414                           ;lcd_keypad.c: 166: void LCD_Char(char dat);lcd_keypad.c: 167: {;lcd_keypad.c: 168:  LAT
      +                          C= dat;
  1415  000C1A  C007  FF8B         	movff	LCD_Char@dat,3979	;volatile
  1416  000C1E                     
  1417                           ;lcd_keypad.c: 169:  LATD0 = 1;
  1418  000C1E  808C               	bsf	3980,0,c	;volatile
  1419  000C20                     
  1420                           ;lcd_keypad.c: 170:  LATD1=1;
  1421  000C20  828C               	bsf	3980,1,c	;volatile
  1422  000C22                     
  1423                           ;lcd_keypad.c: 171:  LATD1=0;
  1424  000C22  928C               	bcf	3980,1,c	;volatile
  1425  000C24                     
  1426                           ;lcd_keypad.c: 172:  MSdelay(1);
  1427  000C24  0E00               	movlw	0
  1428  000C26  6E02               	movwf	(MSdelay@val+1)^0,c
  1429  000C28  0E01               	movlw	1
  1430  000C2A  6E01               	movwf	MSdelay@val^0,c
  1431  000C2C  EC78  F005         	call	_MSdelay	;wreg free
  1432  000C30  0012               	return		;funcret
  1433  000C32                     __end_of_LCD_Char:
  1434                           	callstack 0
  1435                           
  1436 ;; *************** function _LCD_Init *****************
  1437 ;; Defined at:
  1438 ;;		line 141 in file "lcd_keypad.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1452 ;;      Params:         0       0       0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    2
  1459 ;; This function calls:
  1460 ;;		_LCD_Command
  1461 ;;		_MSdelay
  1462 ;; This function is called by:
  1463 ;;		_main
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text5
  1468  000BEA                     __ptext5:
  1469                           	callstack 0
  1470  000BEA                     _LCD_Init:
  1471                           	callstack 28
  1472  000BEA                     
  1473                           ;lcd_keypad.c: 143:     MSdelay(15);
  1474  000BEA  0E00               	movlw	0
  1475  000BEC  6E02               	movwf	(MSdelay@val+1)^0,c
  1476  000BEE  0E0F               	movlw	15
  1477  000BF0  6E01               	movwf	MSdelay@val^0,c
  1478  000BF2  EC78  F005         	call	_MSdelay	;wreg free
  1479  000BF6                     
  1480                           ;lcd_keypad.c: 144:     TRISC = 0x00;
  1481  000BF6  0E00               	movlw	0
  1482  000BF8  6E94               	movwf	148,c	;volatile
  1483  000BFA                     
  1484                           ;lcd_keypad.c: 145:     TRISD = 0x00;
  1485  000BFA  0E00               	movlw	0
  1486  000BFC  6E95               	movwf	149,c	;volatile
  1487                           
  1488                           ;lcd_keypad.c: 146:     LCD_Command(0x38);
  1489  000BFE  0E38               	movlw	56
  1490  000C00  EC19  F006         	call	_LCD_Command
  1491                           
  1492                           ;lcd_keypad.c: 147:     LCD_Command(0x01);
  1493  000C04  0E01               	movlw	1
  1494  000C06  EC19  F006         	call	_LCD_Command
  1495                           
  1496                           ;lcd_keypad.c: 148:     LCD_Command(0x0c);
  1497  000C0A  0E0C               	movlw	12
  1498  000C0C  EC19  F006         	call	_LCD_Command
  1499                           
  1500                           ;lcd_keypad.c: 149:     LCD_Command(0x06);
  1501  000C10  0E06               	movlw	6
  1502  000C12  EC19  F006         	call	_LCD_Command
  1503  000C16  0012               	return		;funcret
  1504  000C18                     __end_of_LCD_Init:
  1505                           	callstack 0
  1506                           
  1507 ;; *************** function _LCD_Command *****************
  1508 ;; Defined at:
  1509 ;;		line 157 in file "lcd_keypad.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  cmd             1    wreg     unsigned char 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  cmd             1    6[COMRAM] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, status,2, status,0, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1523 ;;      Params:         0       0       0       0       0       0       0
  1524 ;;      Locals:         1       0       0       0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0
  1526 ;;      Totals:         1       0       0       0       0       0       0
  1527 ;;Total ram usage:        1 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    1
  1530 ;; This function calls:
  1531 ;;		_MSdelay
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;;		_LCD_Init
  1535 ;;		_LCD_String_xy
  1536 ;;		_LCD_Clear
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text6
  1541  000C32                     __ptext6:
  1542                           	callstack 0
  1543  000C32                     _LCD_Command:
  1544                           	callstack 28
  1545                           
  1546                           ;incstack = 0
  1547                           ;LCD_Command@cmd stored from wreg
  1548  000C32  6E07               	movwf	LCD_Command@cmd^0,c
  1549  000C34                     
  1550                           ;lcd_keypad.c: 157: void LCD_Command(char cmd );lcd_keypad.c: 158: {;lcd_keypad.c: 159: 
      +                           LATC= cmd;
  1551  000C34  C007  FF8B         	movff	LCD_Command@cmd,3979	;volatile
  1552  000C38                     
  1553                           ;lcd_keypad.c: 160:  LATD0 = 0;
  1554  000C38  908C               	bcf	3980,0,c	;volatile
  1555  000C3A                     
  1556                           ;lcd_keypad.c: 161:  LATD1 = 1;
  1557  000C3A  828C               	bsf	3980,1,c	;volatile
  1558  000C3C                     
  1559                           ;lcd_keypad.c: 162:  LATD1 = 0;
  1560  000C3C  928C               	bcf	3980,1,c	;volatile
  1561  000C3E                     
  1562                           ;lcd_keypad.c: 163:  MSdelay(3);
  1563  000C3E  0E00               	movlw	0
  1564  000C40  6E02               	movwf	(MSdelay@val+1)^0,c
  1565  000C42  0E03               	movlw	3
  1566  000C44  6E01               	movwf	MSdelay@val^0,c
  1567  000C46  EC78  F005         	call	_MSdelay	;wreg free
  1568  000C4A  0012               	return		;funcret
  1569  000C4C                     __end_of_LCD_Command:
  1570                           	callstack 0
  1571                           
  1572 ;; *************** function _MSdelay *****************
  1573 ;; Defined at:
  1574 ;;		line 203 in file "lcd_keypad.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  val             2    0[COMRAM] unsigned int 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  j               2    4[COMRAM] unsigned int 
  1579 ;;  i               2    2[COMRAM] unsigned int 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1589 ;;      Params:         2       0       0       0       0       0       0
  1590 ;;      Locals:         4       0       0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0       0       0
  1592 ;;      Totals:         6       0       0       0       0       0       0
  1593 ;;Total ram usage:        6 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;;		_LCD_Init
  1600 ;;		_LCD_Command
  1601 ;;		_LCD_Char
  1602 ;;		_keyfind
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text7
  1607  000AF0                     __ptext7:
  1608                           	callstack 0
  1609  000AF0                     _MSdelay:
  1610                           	callstack 29
  1611  000AF0                     
  1612                           ;lcd_keypad.c: 203: void MSdelay(unsigned int val);lcd_keypad.c: 204: {;lcd_keypad.c: 20
      +                          5:      unsigned int i,j;;lcd_keypad.c: 206:         for(i=0;i<val;i++)
  1613  000AF0  0E00               	movlw	0
  1614  000AF2  6E04               	movwf	(MSdelay@i+1)^0,c
  1615  000AF4  0E00               	movlw	0
  1616  000AF6  6E03               	movwf	MSdelay@i^0,c
  1617  000AF8  EF91  F005         	goto	l1102
  1618  000AFC                     l1090:
  1619                           
  1620                           ;lcd_keypad.c: 207:             for(j=0;j<165;j++);
  1621  000AFC  0E00               	movlw	0
  1622  000AFE  6E06               	movwf	(MSdelay@j+1)^0,c
  1623  000B00  0E00               	movlw	0
  1624  000B02  6E05               	movwf	MSdelay@j^0,c
  1625  000B04                     l1096:
  1626  000B04  4A05               	infsnz	MSdelay@j^0,f,c
  1627  000B06  2A06               	incf	(MSdelay@j+1)^0,f,c
  1628  000B08  5006               	movf	(MSdelay@j+1)^0,w,c
  1629  000B0A  E109               	bnz	u290
  1630  000B0C  0EA5               	movlw	165
  1631  000B0E  5C05               	subwf	MSdelay@j^0,w,c
  1632  000B10  A0D8               	btfss	status,0,c
  1633  000B12  EF8D  F005         	goto	u291
  1634  000B16  EF8F  F005         	goto	u290
  1635  000B1A                     u291:
  1636  000B1A  EF82  F005         	goto	l1096
  1637  000B1E                     u290:
  1638  000B1E  4A03               	infsnz	MSdelay@i^0,f,c
  1639  000B20  2A04               	incf	(MSdelay@i+1)^0,f,c
  1640  000B22                     l1102:
  1641  000B22  5001               	movf	MSdelay@val^0,w,c
  1642  000B24  5C03               	subwf	MSdelay@i^0,w,c
  1643  000B26  5002               	movf	(MSdelay@val+1)^0,w,c
  1644  000B28  5804               	subwfb	(MSdelay@i+1)^0,w,c
  1645  000B2A  A0D8               	btfss	status,0,c
  1646  000B2C  EF9A  F005         	goto	u301
  1647  000B30  EF9C  F005         	goto	u300
  1648  000B34                     u301:
  1649  000B34  EF7E  F005         	goto	l1090
  1650  000B38                     u300:
  1651  000B38  0012               	return		;funcret
  1652  000B3A                     __end_of_MSdelay:
  1653                           	callstack 0
  1654                           
  1655                           	psect	rparam
  1656  0000                     
  1657                           	psect	idloc
  1658                           
  1659                           ;Config register IDLOC0 @ 0x200000
  1660                           ;	unspecified, using default values
  1661  200000                     	org	2097152
  1662  200000  FF                 	db	255
  1663                           
  1664                           ;Config register IDLOC1 @ 0x200001
  1665                           ;	unspecified, using default values
  1666  200001                     	org	2097153
  1667  200001  FF                 	db	255
  1668                           
  1669                           ;Config register IDLOC2 @ 0x200002
  1670                           ;	unspecified, using default values
  1671  200002                     	org	2097154
  1672  200002  FF                 	db	255
  1673                           
  1674                           ;Config register IDLOC3 @ 0x200003
  1675                           ;	unspecified, using default values
  1676  200003                     	org	2097155
  1677  200003  FF                 	db	255
  1678                           
  1679                           ;Config register IDLOC4 @ 0x200004
  1680                           ;	unspecified, using default values
  1681  200004                     	org	2097156
  1682  200004  FF                 	db	255
  1683                           
  1684                           ;Config register IDLOC5 @ 0x200005
  1685                           ;	unspecified, using default values
  1686  200005                     	org	2097157
  1687  200005  FF                 	db	255
  1688                           
  1689                           ;Config register IDLOC6 @ 0x200006
  1690                           ;	unspecified, using default values
  1691  200006                     	org	2097158
  1692  200006  FF                 	db	255
  1693                           
  1694                           ;Config register IDLOC7 @ 0x200007
  1695                           ;	unspecified, using default values
  1696  200007                     	org	2097159
  1697  200007  FF                 	db	255
  1698                           
  1699                           	psect	config
  1700                           
  1701                           ; Padding undefined space
  1702  300000                     	org	3145728
  1703  300000  FF                 	db	255
  1704                           
  1705                           ;Config register CONFIG1H @ 0x300001
  1706                           ;	Oscillator Selection bits
  1707                           ;	OSC = HS, HS oscillator
  1708                           ;	Fail-Safe Clock Monitor Enable bit
  1709                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1710                           ;	Internal/External Oscillator Switchover bit
  1711                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1712  300001                     	org	3145729
  1713  300001  02                 	db	2
  1714                           
  1715                           ;Config register CONFIG2L @ 0x300002
  1716                           ;	Power-up Timer Enable bit
  1717                           ;	PWRT = OFF, PWRT disabled
  1718                           ;	Brown-out Reset Enable bits
  1719                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1720                           ;	Brown Out Reset Voltage bits
  1721                           ;	BORV = 3, Minimum setting
  1722  300002                     	org	3145730
  1723  300002  1F                 	db	31
  1724                           
  1725                           ;Config register CONFIG2H @ 0x300003
  1726                           ;	Watchdog Timer Enable bit
  1727                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1728                           ;	Watchdog Timer Postscale Select bits
  1729                           ;	WDTPS = 32768, 1:32768
  1730  300003                     	org	3145731
  1731  300003  1E                 	db	30
  1732                           
  1733                           ; Padding undefined space
  1734  300004                     	org	3145732
  1735  300004  FF                 	db	255
  1736                           
  1737                           ;Config register CONFIG3H @ 0x300005
  1738                           ;	CCP2 MUX bit
  1739                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1740                           ;	PORTB A/D Enable bit
  1741                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1742                           ;	Low-Power Timer1 Oscillator Enable bit
  1743                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1744                           ;	MCLR Pin Enable bit
  1745                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1746  300005                     	org	3145733
  1747  300005  81                 	db	129
  1748                           
  1749                           ;Config register CONFIG4L @ 0x300006
  1750                           ;	Stack Full/Underflow Reset Enable bit
  1751                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1752                           ;	Single-Supply ICSP Enable bit
  1753                           ;	LVP = ON, Single-Supply ICSP enabled
  1754                           ;	Extended Instruction Set Enable bit
  1755                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1756                           ;	Background Debugger Enable bit
  1757                           ;	DEBUG = 0x1, unprogrammed default
  1758  300006                     	org	3145734
  1759  300006  85                 	db	133
  1760                           
  1761                           ; Padding undefined space
  1762  300007                     	org	3145735
  1763  300007  FF                 	db	255
  1764                           
  1765                           ;Config register CONFIG5L @ 0x300008
  1766                           ;	Code Protection bit
  1767                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1768                           ;	Code Protection bit
  1769                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1770                           ;	Code Protection bit
  1771                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1772                           ;	Code Protection bit
  1773                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1774  300008                     	org	3145736
  1775  300008  0F                 	db	15
  1776                           
  1777                           ;Config register CONFIG5H @ 0x300009
  1778                           ;	Boot Block Code Protection bit
  1779                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1780                           ;	Data EEPROM Code Protection bit
  1781                           ;	CPD = OFF, Data EEPROM not code-protected
  1782  300009                     	org	3145737
  1783  300009  C0                 	db	192
  1784                           
  1785                           ;Config register CONFIG6L @ 0x30000A
  1786                           ;	Write Protection bit
  1787                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1788                           ;	Write Protection bit
  1789                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1790                           ;	Write Protection bit
  1791                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1792                           ;	Write Protection bit
  1793                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1794  30000A                     	org	3145738
  1795  30000A  0F                 	db	15
  1796                           
  1797                           ;Config register CONFIG6H @ 0x30000B
  1798                           ;	Configuration Register Write Protection bit
  1799                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1800                           ;	Boot Block Write Protection bit
  1801                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1802                           ;	Data EEPROM Write Protection bit
  1803                           ;	WRTD = OFF, Data EEPROM not write-protected
  1804  30000B                     	org	3145739
  1805  30000B  E0                 	db	224
  1806                           
  1807                           ;Config register CONFIG7L @ 0x30000C
  1808                           ;	Table Read Protection bit
  1809                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1810                           ;	Table Read Protection bit
  1811                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1812                           ;	Table Read Protection bit
  1813                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1814                           ;	Table Read Protection bit
  1815                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1816  30000C                     	org	3145740
  1817  30000C  0F                 	db	15
  1818                           
  1819                           ;Config register CONFIG7H @ 0x30000D
  1820                           ;	Boot Block Table Read Protection bit
  1821                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1822  30000D                     	org	3145741
  1823  30000D  40                 	db	64
  1824                           tosu	equ	0xFFF
  1825                           tosh	equ	0xFFE
  1826                           tosl	equ	0xFFD
  1827                           stkptr	equ	0xFFC
  1828                           pclatu	equ	0xFFB
  1829                           pclath	equ	0xFFA
  1830                           pcl	equ	0xFF9
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           indf0	equ	0xFEF
  1838                           postinc0	equ	0xFEE
  1839                           postdec0	equ	0xFED
  1840                           preinc0	equ	0xFEC
  1841                           plusw0	equ	0xFEB
  1842                           fsr0h	equ	0xFEA
  1843                           fsr0l	equ	0xFE9
  1844                           wreg	equ	0xFE8
  1845                           indf1	equ	0xFE7
  1846                           postinc1	equ	0xFE6
  1847                           postdec1	equ	0xFE5
  1848                           preinc1	equ	0xFE4
  1849                           plusw1	equ	0xFE3
  1850                           fsr1h	equ	0xFE2
  1851                           fsr1l	equ	0xFE1
  1852                           bsr	equ	0xFE0
  1853                           indf2	equ	0xFDF
  1854                           postinc2	equ	0xFDE
  1855                           postdec2	equ	0xFDD
  1856                           preinc2	equ	0xFDC
  1857                           plusw2	equ	0xFDB
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8

Data Sizes:
    Strings     134
    Constant    0
    Data        24
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     35      70
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_9(CODE[15]), STR_8(CODE[12]), STR_7(CODE[17]), STR_6(CODE[12]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[15]), STR_2(CODE[12]), 
		 -> STR_1(CODE[17]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_9(CODE[15]), STR_8(CODE[12]), STR_7(CODE[17]), STR_6(CODE[12]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[15]), STR_2(CODE[12]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_LCD_String_xy
    _keyfind->_MSdelay
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    9674
                                             14 COMRAM    21    21      0
                           _LCD_Char
                        _LCD_Command
                           _LCD_Init
                      _LCD_String_xy
                            _MSdelay
                            _keyfind
 ---------------------------------------------------------------------------------
 (1) _keyfind                                              1     1      0     928
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        5     2      3    3524
                                              9 COMRAM     5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1071
                                              7 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     950
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    1878
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     950
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2     928
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Char
     _MSdelay
   _LCD_Command
     _MSdelay
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _MSdelay
   _keyfind
     _MSdelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     23      46       1       55.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      46      15        0.0%
DATA                 0      0      46       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Jul 12 13:02:57 2020

           ?_LCD_Command 0001                       l62 08CA                       l71 0C4A  
                     l80 0BE8                       l65 0C16                       l74 0C30  
                     l93 0B38                       l85 0B78              ?_LCD_String 0008  
                    l111 09CA                      l106 0986                      l115 0A0E  
                    l125 0AEE                      l119 0A52                      _RA0 007C00  
                    u300 0B38                      u301 0B34                      u310 0BE8  
                    u311 0BE4                      u320 0B4C                      u400 09DC  
                    u321 0B48                      u401 09D8                      u410 0A00  
                    u330 08EE                      u411 09FC                      u331 08EA  
                    u420 0A20                      u340 0906                      u500 0784  
                    u421 0A1C                      u341 0902                      u501 0780  
                    u430 0A44                      u350 092E                      u510 0798  
                    u431 0A40                      u351 092A                      u511 0794  
                    u440 0A64                      u360 0946                      u520 0820  
                    u441 0A60                      u361 0942                      u521 081C  
                    u290 0B1E                      u450 0A76                      u370 0978  
                    u530 0866                      u291 0B1A                      u451 0A72  
                    u371 0974                      u531 0862                      u460 0A9E  
                    u380 0998                      u540 087A                      u461 0A9A  
                    u381 0994                      u541 0876                      u470 0AC6  
                    u390 09BC                      u550 088E                      u471 0AC2  
                    u391 09B8                      u551 088A                      u560 08A2  
                    u480 075C                      u561 089E                      u481 0758  
                    u490 0770                      u491 076C                      prod 000FF3  
                    wreg 000FE8              LCD_Char@dat 0007                     l1100 0B1E  
                   l1102 0B22                     l1110 0C22                     l1120 0C3C  
                   l1112 0C24                     l1104 0C1A                     l1200 09E4  
                   l1122 0C3E                     l1114 0C34                     l1106 0C1E  
                   l1130 0BCC                     l1210 0A24                     l1202 09EA  
                   l1116 0C38                     l1132 0BEA                     l1108 0C20  
                   l1124 0BB4                     l1140 0B3C                     l1220 0A4C  
                   l1212 0A28                     l1204 09EE                     l1300 0730  
                   l1118 0C3A                     l1134 0BF6                     l1126 0BB8  
                   l1150 0B6C                     l1142 0B4C                     l1230 0A8C  
                   l1214 0A2E                     l1206 0A00                     l1222 0A64  
                   l1310 0784                     l1302 0736                     l1136 0BFA  
                   l1128 0BC8                     l1144 0B54                     l1240 0AC6  
                   l1232 0A9E                     l1224 0A76                     l1216 0A32  
                   l1208 0A08                     l1160 0906                     l1152 08CE  
                   l1320 07C6                     l1312 0798                     l1304 0748  
                   l1090 0AFC                     l1146 0B5E                     l1138 0B3C  
                   l1218 0A44                     l1170 0946                     l1162 0912  
                   l1154 08D6                     l1330 07FA                     l1322 07CA  
                   l1314 07AA                     l1306 075C                     l1148 0B66  
                   l1180 0966                     l1172 0952                     l1164 0916  
                   l1156 08DC                     l1340 0838                     l1332 0806  
                   l1324 07D0                     l1316 07B6                     l1308 0770  
                   l1260 06A4                     l1252 0688                     l1246 0ADC  
                   l1238 0AB4                     l1190 09A6                     l1182 0978  
                   l1174 0958                     l1166 091C                     l1158 08EE  
                   l1350 0866                     l1342 083C                     l1334 080C  
                   l1326 07E2                     l1318 07BA                     l1270 06E0  
                   l1262 06B6                     l1254 068A                     l1096 0B04  
                   l1088 0AF0                     l1192 09AA                     l1184 0980  
                   l1176 095C                     l1168 092E                     l1360 08BA  
                   l1352 087A                     l1344 0848                     l1336 0820  
                   l1328 07F4                     l1280 06E0                     l1272 06E0  
                   l1264 06C2                     l1256 068E                     l1098 0B08  
                   l1194 09BC                     l1186 099C                     l1178 0962  
                   l1362 08BC                     l1354 088E                     l1346 084C  
                   l1338 0826                     l1290 0706                     l1282 06E4  
                   l1274 06E0                     l1266 06C8                     l1258 0692  
                   l1196 09C4                     l1188 09A0                     l1364 08C8  
                   l1356 08A2                     l1348 0852                     l1292 070C  
                   l1284 06E8                     l1276 06E0                     l1268 06DA  
                   l1198 09E0                     l1358 08A8                     l1294 0718  
                   l1286 06F4                     l1278 06E0                     l1296 071E  
                   l1288 06FA                     l1298 072A                     STR_1 0634  
                   STR_2 067B                     STR_3 0654                     STR_4 0601  
                   STR_5 0612                     STR_6 0663                     STR_7 0623  
                   STR_8 066F                     STR_9 0645                     _LATA 000F89  
                   _LATB 000F8A                     _LATC 000F8B                     _RBPU 007F8F  
                   _main 0688                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     prodl 000FF3                     start 0000  
        __end_of_MSdelay 0B3A            _LCD_String_xy 0B3A             ___param_bank 000000  
       __end_of_LCD_Char 0C32         __end_of_LCD_Init 0C18                    ?_main 0001  
                  _LATD0 007C60                    _LATD1 007C61                    _PORTA 000F80  
                  _PORTB 000F81                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _array 003C  
        __end_of_keyfind 0AF0                    tablat 000FF5                    status 000FD8  
    __size_of_LCD_String 0036           ?_LCD_String_xy 000A          __initialization 0B7A  
           __end_of_main 08CE                   ??_main 000F            __activetblptr 000001  
       LCD_String_xy@msg 000B         LCD_String_xy@pos 000A         LCD_String_xy@row 000D  
              ??_MSdelay 0003                   _OSCCON 000FD3                   _keypad 0024  
                 clear_0 0BA0                   main@a2 001C                   main@b2 001E  
                 main@c2 0020                   main@d2 0022                   main@e2 001A  
                 _rowloc 0045     __size_of_LCD_Command 001A             __pdataCOMRAM 0024  
              ??_keyfind 0007             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ?_LCD_Char 0001  
             __accesstop 0080  __end_of__initialization 0BA6                ?_LCD_Init 0001  
        ??_LCD_String_xy 000D            ___rparam_used 000001           __pcstackCOMRAM 0001  
           ??_LCD_String 000A               ??_LCD_Char 0007               ??_LCD_Init 0008  
     __end_of_LCD_String 0BEA                  _MSdelay 0AF0            LCD_String@msg 0008  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0600  
                __pcinit 0B7A                  __ramtop 0600                  __ptext0 0688  
                __ptext1 08CE                  __ptext2 0B3A                  __ptext3 0BB4  
                __ptext4 0C18                  __ptext5 0BEA                  __ptext6 0C32  
                __ptext7 0AF0                  _col_loc 0046                  _keyfind 08CE  
   end_of_initialization 0BA6           LCD_Command@cmd 0007                  postdec1 000FE5  
                postinc0 000FEE        __size_of_LCD_Char 001A        __size_of_LCD_Init 002E  
          ??_LCD_Command 0007            __pidataCOMRAM 0C4C      start_initialization 0B7A  
  __end_of_LCD_String_xy 0B7A      __end_of_LCD_Command 0C4C              __pbssCOMRAM 003C  
               ?_MSdelay 0001              __smallconst 0600                 ?_keyfind 0001  
  LCD_String_xy@location 000E                 MSdelay@i 0003                 MSdelay@j 0005  
               _LCD_Char 0C18                 _LCD_Init 0BEA              _LCD_Command 0C32  
              copy_data0 0B8E         __size_of_MSdelay 004A                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0600         __size_of_keyfind 0222  
          __size_of_main 0246                 _password 0034               MSdelay@val 0001  
               _temp_col 0044               _LCD_String 0BB4   __size_of_LCD_String_xy 0040  
